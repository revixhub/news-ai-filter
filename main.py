import asyncio
import signal
import sys
from datetime import datetime
import structlog

from src.bot.telegram_bot import TelegramBot
from src.core.scheduler import DigestScheduler
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="ISO"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger()

class MarketingDigestBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.bot = None
        self.scheduler = None
        self.running = False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            logger.info("Starting Marketing Digest Bot", version="1.0.0")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self._check_config()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.bot = TelegramBot()
            self.scheduler = DigestScheduler(self.bot)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.bot.start()
            logger.info("Telegram bot started successfully")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            await self.scheduler.start()
            logger.info("Scheduler started successfully")
            
            self.running = True
            logger.info("Marketing Digest Bot fully operational", 
                       digest_time=config.DIGEST_TIME,
                       sources_count=len(config.ALLOWED_USER_IDS))
            
            # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self._wait_for_shutdown()
            
        except Exception as e:
            logger.error("Failed to start bot", error=str(e))
            sys.exit(1)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.running:
            return
            
        logger.info("Stopping Marketing Digest Bot...")
        self.running = False
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if self.scheduler:
                await self.scheduler.stop()
                logger.info("Scheduler stopped")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            if self.bot:
                await self.bot.stop()
                logger.info("Telegram bot stopped")
            
            logger.info("Marketing Digest Bot stopped successfully")
            
        except Exception as e:
            logger.error("Error during shutdown", error=str(e))
    
    def _check_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        required_vars = [
            ("TELEGRAM_BOT_TOKEN", config.TELEGRAM_BOT_TOKEN),
            ("ALLOWED_USER_IDS", config.ALLOWED_USER_IDS),
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        if config.AI_PROVIDER == "openai":
            required_vars.append(("OPENAI_API_KEY", config.OPENAI_API_KEY))
        elif config.AI_PROVIDER == "anthropic":
            required_vars.append(("ANTHROPIC_API_KEY", config.ANTHROPIC_API_KEY))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram API –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
        if config.TELEGRAM_API_ID and config.TELEGRAM_API_HASH:
            required_vars.extend([
                ("TELEGRAM_API_ID", config.TELEGRAM_API_ID),
                ("TELEGRAM_API_HASH", config.TELEGRAM_API_HASH),
                ("TELEGRAM_PHONE", config.TELEGRAM_PHONE)
            ])
        
        missing_vars = []
        for var_name, var_value in required_vars:
            if not var_value:
                missing_vars.append(var_name)
        
        if missing_vars:
            logger.error("Missing required configuration variables", 
                        missing=missing_vars)
            print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
            for var in missing_vars:
                print(f"   - {var}")
            print(f"\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
            sys.exit(1)
        
        logger.info("Configuration validated successfully")
    
    async def _wait_for_shutdown(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        def signal_handler(signum, frame):
            logger.info("Received shutdown signal", signal=signum)
            asyncio.create_task(self.stop())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –ñ–¥–µ–º, –ø–æ–∫–∞ running = True
        while self.running:
            await asyncio.sleep(1)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = MarketingDigestBot()
    
    try:
        await app.start()
    except KeyboardInterrupt:
        logger.info("Received keyboard interrupt")
    except Exception as e:
        logger.error("Unexpected error", error=str(e))
    finally:
        await app.stop()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    if sys.version_info < (3, 10):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.10 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Marketing Digest Bot...")
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 