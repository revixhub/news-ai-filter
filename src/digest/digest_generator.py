from datetime import datetime
from typing import List, Dict
import structlog
from pathlib import Path

from src.models import AnalyzedContent, Digest, DigestItem, ContentCategory
import config

logger = structlog.get_logger()

class DigestGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.digests_dir = config.DATA_DIR / "digests"
        self.digests_dir.mkdir(exist_ok=True)
    
    def generate_digest(self, content_list: List[AnalyzedContent], 
                       insights: List[str], user_id: int) -> Digest:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
            sorted_content = sorted(content_list, 
                                  key=lambda x: x.importance_score, 
                                  reverse=True)
            
            # –¢–æ–ø-5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            top_items = []
            for item in sorted_content[:5]:
                digest_item = DigestItem(
                    title=item.title,
                    content=self._truncate_content(item.content),
                    url=item.url,
                    source=item.source_name,
                    importance_score=item.importance_score,
                    category=item.category,
                    explanation=item.explanation
                )
                top_items.append(digest_item)
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            other_items = self._categorize_remaining_items(sorted_content[5:])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title = f"üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –î–∞–π–¥–∂–µ—Å—Ç ‚Äî {datetime.now().strftime('%d.%m.%Y')}"
            
            digest = Digest(
                id=None,
                user_id=user_id,
                title=title,
                top_items=top_items,
                other_items=other_items,
                insights=insights,
                created_at=datetime.now()
            )
            
            logger.info("Digest generated", 
                       top_items=len(top_items),
                       other_items=len(other_items),
                       insights=len(insights))
            
            return digest
            
        except Exception as e:
            logger.error("Failed to generate digest", error=str(e))
            raise
    
    def format_for_telegram(self, digest: Digest) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è Telegram"""
        try:
            message = f"üî• *{digest.title}*\n\n"
            
            # –¢–æ–ø-5 –∏–Ω—Å–∞–π—Ç–æ–≤
            if digest.top_items:
                message += "üìà *–¢–æ–ø\\-5 –≥–ª–∞–≤–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–Ω—è:*\n\n"
                
                for i, item in enumerate(digest.top_items, 1):
                    message += f"*{i}\\. {self._escape_markdown(item.title)}*\n"
                    message += f"üìù {self._escape_markdown(item.explanation[:200])}...\n"
                    
                    if item.url:
                        message += f"üîó [–ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫]({item.url})\n"
                    
                    message += f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫: {self._escape_markdown(item.source)}\n\n"
            
            # –û–±—â–∏–µ –∏–Ω—Å–∞–π—Ç—ã –¥–Ω—è
            if digest.insights:
                message += "üéØ *–í—ã–≤–æ–¥—ã –¥–Ω—è:*\n\n"
                for insight in digest.insights:
                    message += f"‚Ä¢ {self._escape_markdown(insight)}\n"
                message += "\n"
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if digest.other_items:
                message += "üìä *–û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n\n"
                
                categorized = self._group_by_category(digest.other_items)
                
                for category, items in categorized.items():
                    if items:
                        emoji = self._get_category_emoji(category)
                        message += f"{emoji} *{category.value}:*\n"
                        
                        for item in items[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                            title_short = item.title[:60] + "..." if len(item.title) > 60 else item.title
                            message += f"  ‚Ä¢ {self._escape_markdown(title_short)}\n"
                            if item.url:
                                message += f"    [–ß–∏—Ç–∞—Ç—å]({item.url})\n"
                        message += "\n"
            
            # –§—É—Ç–µ—Ä
            message += "üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /digest –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞\n"
            message += "üìã /sources \\- —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
            message += f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: –∑–∞–≤—Ç—Ä–∞ –≤ {config.DIGEST_TIME}"
            
            return message
            
        except Exception as e:
            logger.error("Failed to format digest", error=str(e))
            return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"
    
    def save_to_file(self, digest: Digest) -> Path:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø–æ –¥–∞—Ç–µ
            date_str = digest.created_at.strftime("%Y-%m")
            date_dir = self.digests_dir / date_str
            date_dir.mkdir(exist_ok=True)
            
            # –ò–º—è —Ñ–∞–π–ª–∞
            filename = f"digest_{digest.created_at.strftime('%Y%m%d_%H%M')}.md"
            filepath = date_dir / filename
            
            # –ö–æ–Ω—Ç–µ–Ω—Ç –≤ markdown
            content = self._format_as_markdown(digest)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info("Digest saved to file", filepath=str(filepath))
            return filepath
            
        except Exception as e:
            logger.error("Failed to save digest to file", error=str(e))
            raise
    
    def _truncate_content(self, content: str, max_length: int = 300) -> str:
        """–û–±—Ä–µ–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        if len(content) <= max_length:
            return content
        return content[:max_length] + "..."
    
    def _categorize_remaining_items(self, items: List[AnalyzedContent]) -> List[DigestItem]:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        result = []
        for item in items:
            if item.importance_score >= 30:  # –¢–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ
                digest_item = DigestItem(
                    title=item.title,
                    content=self._truncate_content(item.content, 150),
                    url=item.url,
                    source=item.source_name,
                    importance_score=item.importance_score,
                    category=item.category,
                    explanation=item.explanation
                )
                result.append(digest_item)
        
        return result[:15]  # –ú–∞–∫—Å–∏–º—É–º 15 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    
    def _group_by_category(self, items: List[DigestItem]) -> Dict[ContentCategory, List[DigestItem]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        grouped = {}
        for item in items:
            if item.category not in grouped:
                grouped[item.category] = []
            grouped[item.category].append(item)
        
        return grouped
    
    def _get_category_emoji(self, category: ContentCategory) -> str:
        """–≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        emoji_map = {
            ContentCategory.TRENDS: "üìà",
            ContentCategory.CHANNELS: "üì¢",
            ContentCategory.CASES: "üèÜ",
            ContentCategory.TECHNOLOGY: "üîß",
            ContentCategory.RESEARCH: "üìä",
            ContentCategory.CREATIVE: "üé®",
            ContentCategory.OTHER: "üìù"
        }
        return emoji_map.get(category, "üìù")
    
    def _escape_markdown(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ markdown —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Telegram"""
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
        escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        for char in escape_chars:
            text = text.replace(char, f'\\{char}')
        
        return text
    
    def _format_as_markdown(self, digest: Digest) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ markdown –¥–ª—è —Ñ–∞–π–ª–∞"""
        content = f"# {digest.title}\n\n"
        content += f"*–°–æ–∑–¥–∞–Ω–æ: {digest.created_at.strftime('%d.%m.%Y %H:%M')}*\n\n"
        
        # –¢–æ–ø-5
        if digest.top_items:
            content += "## üî• –¢–æ–ø-5 –≥–ª–∞–≤–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–Ω—è\n\n"
            for i, item in enumerate(digest.top_items, 1):
                content += f"### {i}. {item.title}\n\n"
                content += f"**–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏:** {item.importance_score}/100\n\n"
                content += f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {item.category.value}\n\n"
                content += f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {item.explanation}\n\n"
                if item.url:
                    content += f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** [{item.source}]({item.url})\n\n"
                else:
                    content += f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {item.source}\n\n"
                content += "---\n\n"
        
        # –ò–Ω—Å–∞–π—Ç—ã
        if digest.insights:
            content += "## üéØ –í—ã–≤–æ–¥—ã –¥–Ω—è\n\n"
            for insight in digest.insights:
                content += f"- {insight}\n"
            content += "\n"
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        if digest.other_items:
            content += "## üìä –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n\n"
            categorized = self._group_by_category(digest.other_items)
            
            for category, items in categorized.items():
                if items:
                    content += f"### {category.value}\n\n"
                    for item in items:
                        content += f"- **{item.title}** ({item.importance_score}/100)\n"
                        if item.url:
                            content += f"  [–ß–∏—Ç–∞—Ç—å]({item.url})\n"
                        content += f"  *{item.source}*\n\n"
        
        return content 